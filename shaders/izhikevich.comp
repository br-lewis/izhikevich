#version 460
layout(local_size_x = 1) in;

struct Neuron {
    // these are floats, not double. Not sure if double precision is necessary
    // but that's the default used by Matlab which is used in the example
    // implementation
    // but Metal doesn't support doubles at all so we'll use floats since it
    // doesn't seem to be negatively impacting the results

    // parameters
    float a;
    float b;
    float c;
    float d;

    // state
    // v is in mV
    float v;
    float u;
};

layout(set = 0, binding = 0) uniform Config {
    uint neuron_count;
    uint total_time_steps;
    uint time_step;
};

layout(set = 0, binding = 1) buffer Input {
    float[] thalamic;
};

// possibly useful to split this buffer into 2
// 1 to hold the neuron parameters that don't change
// 1 to hold the neuron state which changes every tick
layout(set = 0, binding = 2) buffer Neurons {
    Neuron[] neurons;
};

layout(set = 0, binding = 3) buffer Spikes {
    // 2D array of spikes for a given timestep
    uint[] spikes;
};

layout(set = 0, binding = 4) buffer Connections {
    // 2D array of connection weights between neurons
    float[] connections;
};

// map 2D coordinate to 1D location in flattened arrays
uint flatten_index(uint width, uint y, uint x) {
    return (y * width) + x;
}

float connection_input(uint i, uint time_step) {
    if (time_step < 0) {
        return 0.0;
    }

    float total = 0.0;
    for (uint j=0; j < neuron_count; j++) {
        uint conn_index = flatten_index(neuron_count, i, j);
        uint spike_index = flatten_index(total_time_steps, j, time_step);
        total += connections[conn_index] * spikes[spike_index];
    }
    return total;
}

uint izhikevich_step(inout Neuron n, float i) {
    uint spike = 0;
    if (n.v >= 30.0) {
        n.v = n.c;
        n.u = n.u + n.d;
        spike = 1;
    }

    n.v = n.v + 0.5 * (0.04 * pow(n.v, 2) + 5.0 * n.v + 140.0 - n.u + i);
    n.v = n.v + 0.5 * (0.04 * pow(n.v, 2) + 5.0 * n.v + 140.0 - n.u + i);
    n.u = n.u + n.a * (n.b * n.v - n.u);

    return spike;
}

uint wrapping_dec(uint t, uint max) {
    if (t == 0) {
        return max - 1;
    } else {
        return t - 1;
    }
}

void main() {
    uint i = gl_GlobalInvocationID.x;

    uint prev_time = wrapping_dec(time_step, total_time_steps);
    float connection_input = connection_input(i, prev_time);
    float thalamic_input = thalamic[i];

    uint spike_index = flatten_index(total_time_steps, i, time_step);
    spikes[spike_index] = izhikevich_step(neurons[i], connection_input + thalamic_input);
}
